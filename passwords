$h0m@1s#2023



const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const multer = require('multer');//atachment (anexo de arquivos)
const Imap = require('imap-simple');
const path = require('path');


const app = express();
const port = 3000;

// Middleware para analisar solicitações JSON
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Página de login
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'login.html'));
});

// Variáveis globais para armazenar as configurações de conexão SMTP e IMAP
let smtpConfig = {};
let imapConfig = {};

// Variável de sessão para armazenar o estado de autenticação do usuário
let usuarioAutenticado = false;

// Middleware para verificar se o usuário está autenticado
const verificarAutenticacao = (req, res, next) => {
    if (usuarioAutenticado) {
        // Se o usuário estiver autenticado, avance para a próxima rota ou middleware
        next();
    } else {
        // Caso contrário, redirecione para a página de login
        res.redirect('/login');
    }
};

// Rota para processar o formulário de login
app.post('/login', async (req, res) => {
    const { email, senha } = req.body;

    // Configurações do servidor IMAP
    imapConfig = {
        imap: {
            user: email,
            password: senha,
            host: 'imap.emailemnuvem.com.br',
            port: 993,
            tls: true
        }
    };

    // Configurações do servidor SMTP
    smtpConfig = {
        host: 'smtp.emailemnuvem.com.br',
        port: 465,
        secure: true,
        auth: {
            user: email,
            pass: senha
        }
    };

    try {
        // Tentar conectar-se ao servidor IMAP
        const imap = await Imap.connect(imapConfig);
        await imap.openBox('INBOX');
        await imap.closeBox();

        // Se a conexão for bem-sucedida, definimos usuarioAutenticado como true
        usuarioAutenticado = true;
        // E redirecionamos para a página inicial
        res.redirect('/');
    } catch (error) {
        // Se ocorrer um erro durante a autenticação, exibimos uma mensagem de erro
        console.error('Erro ao autenticar usuário:', error);
        res.send('Credenciais inválidas');
    }
});






const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
      cb(null, file.originalname);
    }
  });
  
  const upload = multer({ dest: 'uploads/' });

// Middleware para analisar solicitações JSON
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Rota para lidar com a raiz do aplicativo
app.get('/', verificarAutenticacao, (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});


// Rota para lidar com o envio de e-mails
// O segundo argumento de upload.array() define o número máximo de arquivos aceitos
// Se você não quiser um limite, pode remover o segundo argumento ou definir como -1
app.post('/send-email', upload.array('attachment'), async (req, res) => {
    console.log('Dados do formulário:', req.body);
    console.log('Anexos recebidos:', req.files); // Imprimir os detalhes dos arquivos recebidos
    
    try {
        // Iterar sobre os arquivos recebidos
        req.files.forEach((file, index) => {
            console.log(`Anexo ${index + 1}: ${file.originalname}`);
        });

        // Exibindo os dados e o anexo no console do servidor
        console.log('Dados do formulário:', req.body);
        console.log('Anexos:', req.files);
        const attachment = req.files;
        // Coletando dados do formulário
        const { to, subject, dimensions, material, quantity, printType, cores, calco, cut, acabamento, additionalInfo} = req.body;
        // Acesse o arquivo enviado através de req.file

        // Construindo o corpo do e-mail
        const message = `
            <!DOCTYPE html>
            <html>
                <body>
                    <h2> Dados para Finalização </h2>
                    <ul>
                        <li><strong>Dimensão Final (L x A): </strong>${dimensions}</li>
                        <li><strong>Material: </strong>${material}</li>
                        <li><strong>Quantidade: </strong>${quantity}</li>
                        <li><strong>Impressão: </strong>${printType}</li>
                        <li><strong>Cores: </strong>${cores}</li>
                        <li><strong>Calço: </strong>${calco}</li>
                        <li><strong>Corte: </strong>${cut}</li>
                        <li><strong>Acabamento: </strong>${acabamento}</li>
                        <li><strong>Informações Adicionais: </strong>${additionalInfo}</li>
                    </ul>
                </body>
            </html>
        `;

        // Criar um transporte SMTP com as configurações definidas durante o login
        const transporter = nodemailer.createTransport(smtpConfig);

        // Configurar as opções do e-mail
        const mailOptions = {
            from: smtpConfig.auth.user,
            to: to,
            subject: subject,
            html: message,
            attachments: req.files.map(file => ({ filename: file.originalname, path: file.path }))
            //attachments: attachments ? attachments.map(file => ({ filename: file.originalname, path: file.path })) : [] // Corrigido para attachments.map
            //attachments: attachment ? [{ filename: attachment.originalname, path: attachment.path }] : []
            //^^^^^^^^^^^^^^^^^^envio de um anexo por email^^^^^^^^^^^^^^^^^^
        };

        // Enviando o e-mail
        
        const info = await transporter.sendMail(mailOptions);
        console.log('E-mail enviado: ' + info.response);
        res.redirect('/'); // Redireciona de volta para a página inicial
    } catch (error) {
        console.error('Erro ao enviar e-mail:', error);
        res.status(500).send('Erro ao enviar e-mail');
    }
});

// Iniciando o servidor
app.listen(port, () => {
    console.log(`Servidor rodando em http://localhost:${port}`);
});







const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const multer = require('multer');
const Imap = require('imap-simple');
const path = require('path');

//////////----------CONEXÃO AO MYSQL----------//////////
const mysql = require('mysql');//importando dados MySql

const connection = mysql.createConnection({ //criando conexão com o banco de dados
    host: 'localhost',
    user:'root',
    password:'L!!cas123',
    database: 'usuarios'
});

connection.connect((err) => {
    if(err){
        console.error('Erro ao conectar-se ao banco de dados. Erro id#', err);
        return;
        //mensagem de erro e sua id correspondente
    }
    console.log('Conexão ao banco de dados MySql bem-sucessida');
//consultas SQL
    const novoUsuario = {
        nome: 'Teste',
        email: 'teste@teste.com',
        senha: 'senha123'
    }
    connection.query('INSERT INTO usuario SET ?', novoUsuario, (err, resultado) => {
        if(err){
            console.error('Erro ao inserir usuario', err);
            return;
        }
        console.log('Novo usuario inserido com sucesso. ID:', resultado.insertId);
        connection.end();
    }); 
});

const app = express();
const port = 3000;

// Middleware para analisar solicitações JSON
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

let smtpConfig = {}; // Configurações do servidor SMTP
let imapConfig = {}; // Configurações do servidor IMAP
let usuarioAutenticado = false; // Estado de autenticação do usuário

// Middleware para verificar se o usuário está autenticado
const verificarAutenticacao = (req, res, next) => {
    if (usuarioAutenticado) {
        next(); // Avança para a próxima rota ou middleware se o usuário estiver autenticado
    } else {
        res.redirect('/login'); // Redireciona para a página de login se o usuário não estiver autenticado
    }
};

// Rota para exibir a página de login
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'login.html'));
});

// Rota para processar o formulário de login
app.post('/login', async (req, res) => {
    const { email, senha } = req.body;

    // Configurações do servidor IMAP
    imapConfig = {
        imap: {
            user: email,
            password: senha,
            host: 'imap.emailemnuvem.com.br',
            port: 993,
            ssl: true,
            connTimeout: 5000, // Tempo limite de conexão de 10 segundos (por exemplo)
            authTimeout: 5000, // Tempo limite de autenticação de 5 segundos (por exemplo)
        }
    };

    // Configurações do servidor SMTP
    smtpConfig = {
        host: 'smtp.emailemnuvem.com.br',
        port: 465,
        secure: true,
        auth: {
            user: email,
            pass: senha
        }
    };

    try {
        // Tentar conectar-se ao servidor IMAP
        const imap = await Imap.connect(imapConfig);
        await imap.openBox('INBOX');
        await imap.closeBox();

        // Se a conexão for bem-sucedida, definimos usuarioAutenticado como true
        usuarioAutenticado = true;
        // E redirecionamos para a página inicial
        res.redirect('/');
    } catch (error) {
        // Se ocorrer um erro durante a autenticação, exibimos uma mensagem de erro
        console.error('Erro ao autenticar usuário:', error);
        res.redirect('/login');
    }
});




// Rota para exibir a página de cadastro
app.get('/cadastro', (req, res) => {
    res.sendFile(path.join(__dirname, 'cadastro.html'));
});

// Rota para processar o formulário de cadastro
app.post('/cadastro', (req, res) => {
    const { nome, email, senha } = req.body;
    
    // Aqui você pode adicionar lógica para salvar os dados do novo usuário no banco de dados ou em algum outro local.
    // Por exemplo, você pode usar um banco de dados como o MongoDB ou MySQL para armazenar os dados do usuário.

    // Depois de salvar os dados, você pode redirecionar o usuário para outra página, como a página de login.
    res.redirect('/login');
});




const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
});

const upload = multer({ storage: storage });

// Rota para exibir a página inicial, protegida pelo middleware de autenticação
app.get('/', verificarAutenticacao, (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Rota para lidar com o envio de e-mails
app.post('/send-email', upload.array('attachment'), async (req, res) => {
    try {
        // Atualizar as configurações de SMTP com as credenciais fornecidas no formulário de envio de e-mails
        smtpConfig = {
            ...smtpConfig,
            auth: {
                user: req.body.from,
                pass: req.body.senha
            }
        };

        // Criar um transporte SMTP com as configurações atualizadas
        const transporter = nodemailer.createTransport(smtpConfig);

        // Configurar as opções do e-mail com os dados fornecidos no formulário de envio de e-mails
        const mailOptions = {
            from: req.body.from,
            to: req.body.to,
            subject: req.body.subject,
            html: req.body.html,
            attachments: req.files.map(file => ({ filename: file.originalname, path: file.path }))
        };

        // Enviar o e-mail
        const info = await transporter.sendMail(mailOptions);
        console.log('E-mail enviado: ' + info.response);
        res.redirect('/'); // Redirecionar de volta para a página inicial
    } catch (error) {
        console.error('Erro ao enviar e-mail:', error);
        res.status(500).send('Erro ao enviar e-mail');
    }
});

// Iniciar o servidor
app.listen(port, () => {
    console.log(`Servidor rodando em http://localhost:${port}`);
});
